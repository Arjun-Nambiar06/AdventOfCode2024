import sys

class Node():
    def __init__(self, state, parent, action):
        self.state = state
        self.parent = parent
        self.action = action


class StackFrontier():
    def __init__(self):
        self.frontier = []

    def add(self, node):
        self.frontier.append(node)

    def contains_state(self, state):
        return any(node.state == state for node in self.frontier)

    def empty(self):
        return len(self.frontier) == 0

    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node = self.frontier[-1]
            self.frontier = self.frontier[:-1]
            return node


class QueueFrontier(StackFrontier):

    def remove(self):
        if self.empty():
            raise Exception("empty frontier")
        else:
            node = self.frontier[0]
            self.frontier = self.frontier[1:]
            return node

class Maze():

    def __init__(self, filename):

        # Read file and set height and width of maze
        with open(filename) as f:
            contents = f.read()

        # Validate start and goal
        if contents.count("A") != 1:
            raise Exception("maze must have exactly one start point")
        if contents.count("B") != 1:
            raise Exception("maze must have exactly one goal")

        # Determine height and width of maze
        contents = contents.splitlines()
        self.height = len(contents)
        self.width = max(len(line) for line in contents)

        # Keep track of walls
        self.walls = []
        for i in range(self.height):
            row = []
            for j in range(self.width):
                try:
                    if contents[i][j] == "A":
                        self.start = (i, j)
                        row.append(False)
                    elif contents[i][j] == "B":
                        self.goal = (i, j)
                        row.append(False)
                    elif contents[i][j] == " ":
                        row.append(False)
                    else:
                        row.append(True)
                except IndexError:
                    row.append(False)
            self.walls.append(row)

        self.solution = None


    def print(self):
        solution = self.solution[1] if self.solution is not None else None
        print()
        for i, row in enumerate(self.walls):
            for j, col in enumerate(row):
                if col:
                    print("â–ˆ", end="")
                elif (i, j) == self.start:
                    print("A", end="")
                elif (i, j) == self.goal:
                    print("B", end="")
                elif solution is not None and (i, j) in solution:
                    print("*", end="")
                else:
                    print(" ", end="")
            print()
        print()


    def neighbors(self, state, cheats_used):
        row, col = state
        candidates = [
            ("up", (row - 1, col)),
            ("down", (row + 1, col)),
            ("left", (row, col - 1)),
            ("right", (row, col + 1))
        ]

        result = []
        for action, (r, c) in candidates:
            if 0 <= r < self.height and 0 <= c < self.width:
                if not self.walls[r][c]:  # Normal path
                    result.append((action, (r, c), cheats_used))
                elif cheats_used < 2:  # Cheat path (through walls)
                    result.append((action, (r, c), cheats_used + 1))
        return result


    def solve_with_cheat(self):
        self.num_explored = 0
        start = Node(state=self.start, parent=None, action=None)
        frontier = QueueFrontier()
        frontier.add((start, 0))

        self.explored = set()
        while True:
            if frontier.empty():
                raise Exception("no solution")
            node, cheats_used = frontier.remove()
            self.num_explored += 1

            if node.state == self.goal:
                actions = []
                cells = []
                while node.parent is not None:
                    actions.append(node.action)
                    cells.append(node.state)
                    node = node.parent
                actions.reverse()
                cells.reverse()
                self.solution = (actions, cells)
                return

            self.explored.add((node.state, cheats_used))

            for action, state, new_cheats_used in self.neighbors(node.state, cheats_used):
                if (state, new_cheats_used) not in self.explored and not frontier.contains_state(state):
                    child = Node(state=state, parent=node, action=action)
                    frontier.add((child, new_cheats_used))


with open("dataaoc20test.txt",'r') as f:
    positions = [line.split(',') for line in f.read().splitlines()]

line = [' ']*71
data = [line[:] for _ in range(71)]
x = 0
for pos in positions:
    if x == 1024:
        break
    data[int(pos[1])][int(pos[0])] = '#'
    x += 1
data[0][0],data[-1][-1] = 'A','B'
datas = []
for line in data:    
    linew = ''
    for i in line:
        linew += i
    linew += '\n'
    datas.append(linew)

with open("dataaoc20text.txt",'w') as f:
    f.writelines(datas)


if len(sys.argv) != 2:
    sys.exit("Usage: python maze.py maze2.txt")

for pos in positions[1024:]:
    data[int(pos[1])][int(pos[0])] = '#'
    datas = []
    for line in data:    
        linew = ''
        for i in line:
            linew += i
        linew += '\n'
        datas.append(linew)
    with open("dataaoc18text.txt",'w') as f:
        f.writelines(datas)
    print(pos)
    m = Maze(sys.argv[1])
    m.solve()
    m.print()